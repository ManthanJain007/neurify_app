version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: neurowrite-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-neurowrite}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-neurowrite_password}
      POSTGRES_DB: ${POSTGRES_DB:-neurowrite}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - neurowrite-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neurowrite"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: neurowrite-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - neurowrite-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database for AI Embeddings
  qdrant:
    image: qdrant/qdrant:latest
    container_name: neurowrite-qdrant
    restart: always
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - neurowrite-network
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-qdrant_api_key}

  # MongoDB for Document Storage
  mongodb:
    image: mongo:7
    container_name: neurowrite-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-neurowrite}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo_password}
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - neurowrite-network

  # AI Engine (Python FastAPI)
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: neurowrite-ai-engine
    restart: always
    environment:
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      POSTGRES_URL: postgresql://${POSTGRES_USER:-neurowrite}:${POSTGRES_PASSWORD:-neurowrite_password}@postgres:5432/${POSTGRES_DB:-neurowrite}
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - neurowrite-network
    volumes:
      - ./ai-engine:/app
      - ai_models:/app/models
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

  # Backend API (Node.js + Express + Socket.io)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: neurowrite-backend
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-neurowrite}:${POSTGRES_PASSWORD:-neurowrite_password}@postgres:5432/${POSTGRES_DB:-neurowrite}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      AI_ENGINE_URL: http://ai-engine:8001
      FRONTEND_URL: http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - mongodb
      - ai-engine
    networks:
      - neurowrite-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: neurowrite-frontend
    restart: always
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_AI_ENGINE_URL: http://localhost:8001
      VITE_GEMINI_API_KEY: ${GEMINI_API_KEY}
      VITE_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - neurowrite-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: neurowrite-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ai-engine
    networks:
      - neurowrite-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: neurowrite-prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - neurowrite-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: neurowrite-grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - neurowrite-network

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  mongodb_data:
  ai_models:
  prometheus_data:
  grafana_data:

networks:
  neurowrite-network:
    driver: bridge
